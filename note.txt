from keras.datasets import mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
from keras import models
from keras import layers
network=models.Sequential()
network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))
network.add(layers.Dense(10, activation='softmax'))
network.compile(optimizer = 'rmsprop', loss='categorical_crossentropy', metrics = ['accuracy'])
train_images = train_images.astype('float32') / 255
train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype('float32') / 255
test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype('float32') /255
from keras.utils import to_categorical
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
network.fit(train_images, train_labels, epochs=5, batch_size=128)
Epoch 1/5
60000/60000 [==============================] - 3s 45us/step - loss: 1.4642 - accuracy: 0.6573
Epoch 2/5
60000/60000 [==============================] - 3s 44us/step - loss: 0.5787 - accuracy: 0.8542
Epoch 3/5
60000/60000 [==============================] - 3s 44us/step - loss: 0.4090 - accuracy: 0.8887
Epoch 4/5
60000/60000 [==============================] - 3s 47us/step - loss: 0.3522 - accuracy: 0.9013
Epoch 5/5
60000/60000 [==============================] - 3s 47us/step - loss: 0.3225 - accuracy: 0.9076
<keras.callbacks.callbacks.History object at 0x00000172102205C8>
test_loss, test_acc = network.evaluate(test_images, test_labels)
10000/10000 [==============================] - 0s 27us/step
print('test_acc: ', test_acc)
test_acc:  0.8266000151634216
>>>
